#!/usr/bin/env python3
'''
Wesnoth Site Status Service Stateful Support Survey Bot (codename Eidyia)

Copyright (C) 2023 by Iris Morelle <iris@irydacea.me>
See COPYING for use and distribution terms.
'''

import argparse
import logging
import sys

from src.eidyia.config import EidyiaConfig
from src.eidyia.core import EidyiaCore, EidyiaNoTasksError
from src.eidyia.discord_client import EidyiaDiscordClient
from src.eidyia.irc_client import EidyiaIrcClient
from src.valen.V1Report import Report as V1Report


# Default path to eidyia config
CONFIG_PATH = './eidyia.jsonc'

# Default path to valen report
REPORT_PATH = './valen.json'

# Report format name
REPORT_FORMAT = 'Valen V1'

# Default client list
_CLIENTS = ['discord', 'irc']

log = logging.getLogger('main')


#
# Program entry point & stuff
#

def exit_error(msg: str):
    '''
    Reports an error and exits.
    '''
    log.error(msg)
    sys.exit(1)


def main():
    '''
    Application entry point.
    '''
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='count', dest='debug',
                        default=0,
                        help='prints extra debugging information. Can be specified up to three times for additional debugging information')
    parser.add_argument('-C', '--client', action='store', dest='clients',
                        default=','.join(_CLIENTS),
                        help=f'comma-delimited list specifying the clients to enable for this session (must be at least one of {", ".join(_CLIENTS)})')
    parser.add_argument('-c', '--config', action='store', dest='config',
                        default=CONFIG_PATH,
                        help='specifies the path to the Eidyia configuration JSON file')
    parser.add_argument('-r', '--report', action='store', dest='report',
                        default=REPORT_PATH,
                        help='specifies the path to the Valen report JSON file')
    args = parser.parse_args()
    clients = args.clients.split(',')
    for cl in clients:
        if cl not in _CLIENTS:
            exit_error(f'Unrecognised client "{cl}". Cannot continue.')

    print(f'''codename "Eidyia" version {EidyiaCore.version}

             Clients: {', '.join(clients)}
    Config file path: {args.config}
    Report file path: {args.report}
       Report format: {REPORT_FORMAT}
''')

    min_log_level = logging.INFO if not args.debug else logging.DEBUG
    logging.basicConfig(format='[%(asctime)s %(name)s %(levelname)s] %(message)s',
                        datefmt='%Y-%m-%d %H:%M:%S',
                        level=min_log_level)
    for level in [logging.CRITICAL, logging.ERROR, logging.WARNING,
                  logging.INFO, logging.DEBUG]:
        # Sorry, I just hate logging YELLING IN MY FACE ALL THE TIME
        logging.addLevelName(level, logging.getLevelName(level).lower())
    if 0 < args.debug < 3:
        for logger in ('discord.client', 'discord.http',
                       'discord.gateway', 'IrcClient.raw'):
            logging.getLogger(logger).setLevel(logging.INFO)

    #
    # Read config file
    #
    config = None
    try:
        config = EidyiaConfig(args.config)
    except EidyiaConfig.FileError as err:
        exit_error(f'Could not read configuration from {args.config}:\n'
                   f'  {err}')
    except EidyiaConfig.ConfigError as err:
        exit_error(f'Incorrect configuration in {args.config}:\n'
                   f'  {err}')
    if not config.irc and not config.discord:
        exit_error('At least one client (Discord, IRC) must be configured. '
                   'Cannot continue.')

    #
    # Set up Eidyia and its client components
    #
    try:
        eidyia = EidyiaCore(args.report)
        eidyia.debug = args.debug > 1
    except (V1Report.FileError, V1Report.FormatError) as err:
        exit_error(f'Could not read report from {args.report}: {err}')

    if config.irc and 'irc' in clients:
        async def irc_client_coro():
            async with EidyiaIrcClient(config) as irc_client:
                irc_client.subscribe()
                await irc_client.setup_connections()
                await irc_client.run()
        eidyia.add_task('IrcClient', irc_client_coro())

    if config.discord and 'discord' in clients:
        async def discord_client_coro():
            async with EidyiaDiscordClient(config) as discord_client:
                discord_client.subscribe()
                await discord_client.start()
        eidyia.add_task('DiscordClient', discord_client_coro())

    # Transfer control to the core, which will run forever
    try:
        eidyia.run()
    except EidyiaNoTasksError:
        exit_error('All selected clients are unconfigured. Cannot continue.')


if __name__ == '__main__':
    main()
